importstd gr
def {line}: gr

let self: [
    "input": [],
    "inputIndex": 0,
    "memory": [0],
    "memoryIndex": 0,
    "output": "",
    "bracketCount": 0,
    "bracketDirection": 0
]

def peek: func () {
    return self.input[self.inputIndex]
}

def isNotNumber: func (char) {
    return match char {
        "0" => false,
        "1" => false,
        "2" => false,
        "3" => false,
        "4" => false,
        "5" => false,
        "6" => false,
        "7" => false,
        "8" => false,
        "9" => false,
        _ => true
    }
}

def customLog: func (message) {
    console.clear()
    log(message)
}

def parseNumber: func (inputLine, index) {
    let char: inputLine[index]
    if isNotNumber(inputLine[index + 1]) {
        self.input: self.input ++ char
        return index
    }
    let num: ""
    loop {
        if isNotNumber(inputLine[index + 1]) {
            break
        }
        num: num ++ inputLine[index + 1]
        index: index + 1
    }
    num: parseInt(num)
    loop {
        if num = 0 {
            break
        }
        self.input: self.input ++ char
        num: num - 1
    }
    return index
}

def addToInput: go func (inputLine) {
    let index: 0
    loop {
        if index >= inputLine.length {
            break
        }
        let opcode: inputLine[index]
        if opcode = "<" {
            index: parseNumber(inputLine, index)
        } else if opcode = ">" {
            index: parseNumber(inputLine, index)
        } else if opcode = "+" {
            index: parseNumber(inputLine, index)
        } else if opcode = "-" {
            index: parseNumber(inputLine, index)
        } else if opcode = "." {
            self.input: self.input ++ opcode
        } else if opcode = "," {
            self.input: self.input ++ opcode
        } else if opcode = "[" {
            self.input: self.input ++ opcode
        } else if opcode = "]" {
            self.input: self.input ++ opcode
        } else if opcode = "#" {
            loop {
                index: index + 1
                if index >= inputLine.length or inputLine[index] = "#" {
                    break
                }
            }
        } else {
            log("Implicit comment") # Implicit comment, throw exception?? ?? ??
        }
        index: index + 1
    }
}

def execute: [
    "then": func () {
    loop {
        if self.inputIndex >= self.input.length {
            break
        }
        let opcode: undefined
        if self.bracketDirection = 1 {
            opcode: "]"
            self.inputIndex: self.inputIndex + 1
        } else if self.bracketDirection = -1 {
            opcode: "["
            self.inputIndex: self.inputIndex - 1
        } else {
            opcode: self.input[self.inputIndex]
        }
        if opcode = "<" {
            if self.memoryIndex > 0 {
                self.memoryIndex: self.memoryIndex - 1            
            } else {
                # Maybe throw exception?? ?? ??
            }
        } else if opcode = ">" {
            self.memoryIndex: self.memoryIndex + 1
            if self.memoryIndex = self.memory.length {
                self.memory: self.memory ++ 0
            }
        } else if opcode = "+" {
            self.memory[self.memoryIndex]: self.memory[self.memoryIndex] + 1
        } else if opcode = "-" {
            self.memory[self.memoryIndex]: self.memory[self.memoryIndex] - 1
        } else if opcode = "." {
            self.output: self.output ++ String.fromCharCode(self.memory[self.memoryIndex])
            customLog(self.output)
        } else if opcode = "," {
            # go {
            #     def ln: get gr.line
            #     log(ln ++ " is a nice name.")
            #     self.input: self.input ++ opcode
            # }
            # loop {
            #     if typeof(ln) = "undefined" {
            #     } else {
            #         break
            #     }
            # }
        } else if opcode = "[" {
            if self.memory[self.memoryIndex] = 0 {
                self.bracketDirection: -1
                loop {
                    self.inputIndex: self.inputIndex + 1
                    if self.inputIndex >= self.input.length {
                        break
                    } else if self.input[self.inputIndex] = "]" and self.bracketCount = 0 {
                        self.bracketDirection = 0
                        break
                    } else if self.input[self.inputIndex] = "[" {
                        self.bracketCount: self.bracketCount + 1
                    } else if self.input[self.inputIndex] = "]" and self.bracketCount > 0 {
                        self.bracketCount: self.bracketCount - 1
                    }
                }
            }
        } else if opcode = "]" {
            self.bracketDirection: 1
            loop {
                self.inputIndex: self.inputIndex - 1
                if self.inputIndex <= -1 {
                    break
                } else if self.input[self.inputIndex] = "[" and self.bracketCount = 0 {
                    self.bracketDirection = 0
                    break
                } else if self.input[self.inputIndex] = "]" {
                    self.bracketCount: self.bracketCount + 1
                } else if self.input[self.inputIndex] = "[" and self.bracketCount > 0 {
                    self.bracketCount: self.bracketCount - 1
                }
            }
        }
        self.inputIndex: self.inputIndex + 1
    }
}]

def parse: go func (inputLine) {
    addToInput(inputLine)
    get gr.wrapPromise(execute)
}

def run: func (path) {
    let inputLine: undefined
    loop {
        inputLine: readFile(path)
        if typeof(inputLine) = "undefined" {
            break
        }
        parse(inputLine)
    }
}

export run
